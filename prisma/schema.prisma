// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model User {
  id                  String    @id @default(uuid())
  first_name          String
  last_name           String
  email               String    @unique
  password            String
  role                UserRole  @default(CUSTOMER)
  image               String
  passwordResetToken  String?
  passwordResetExpiry DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Payment             Payment[]
  shop                shop?
}

model shop {
  id          String    @id @default(uuid())
  name        String
  logo        String
  description String?
  ownerId     String    @unique
  ownerInfo   User      @relation(fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  Product     Product[]
}

model Category {
  id        String    @id @default(uuid())
  label     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  productId String
  Product   Product[]
}

model Product {
  id           String   @id @default(uuid())
  name         String
  avgRating    Float    @default(0)
  description  String
  images       String[]
  price        Float
  stock        Int      @default(0)
  discount     Float    @default(0)
  tag          String?  @default("")
  colors       Color[]
  categoryId   String
  categoryInfo Category @relation(fields: [categoryId], references: [id])
  isSale       Boolean?
  shop         String
  shopInfo     shop     @relation(fields: [shopId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopId       String
}

model Color {
  id        String  @id @default(uuid())
  color     String
  sizes     Size[]
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int    @default(0)
  colorId  String
  color    Color  @relation(fields: [colorId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  SUCCESS
  FAILED
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  userInfo  User          @relation(fields: [userId], references: [id])
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

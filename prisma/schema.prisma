// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model User {
  id                  String            @id @default(uuid())
  first_name          String
  last_name           String
  email               String            @unique
  password            String
  role                UserRole          @default(CUSTOMER)
  isSuspended         Boolean?          @default(false)
  isDeleted           Boolean?          @default(false)
  suspensionDate      DateTime?
  image               String?
  passwordResetToken  String?
  passwordResetExpiry DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Payment             Payment[]
  shop                Shop?
  ShopFollower        ShopFollower[]
  Order               Order[]
  ShippingAddress     ShippingAddress[]
  Review              Review[]
}

model ShippingAddress {
  id               String  @id @default(uuid())
  city             String
  zip_code         String
  phone            String  @default("")
  detailed_address String
  userId           String
  userInfo         User    @relation(fields: [userId], references: [id])
  Order            Order[]
}

model Shop {
  id             String           @id @default(uuid())
  name           String
  logo           String
  description    String?
  isBlackListed  Boolean?         @default(false)
  ownerId        String           @unique
  ownerInfo      User             @relation(fields: [ownerId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Product        Product[]
  ShopFollower   ShopFollower[]
  Order          Order[]
  Payment        Payment[]
  ReviewResponse ReviewResponse[]
  Coupon         Coupon[]
}

model ShopFollower {
  id       String @id @default(uuid())
  shopId   String
  shopInfo Shop   @relation(fields: [shopId], references: [id])
  userId   String
  userInfo User   @relation(fields: [userId], references: [id])

  @@unique([userId, shopId])
}

model Category {
  id        String    @id @default(uuid())
  label     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id           String   @id @default(uuid())
  name         String
  avgRating    Float    @default(0)
  description  String
  images       String[]
  price        Float
  stock        Int      @default(0)
  discount     Float    @default(0)
  tag          String?  @default("")
  colors       Color[]
  categoryId   String
  categoryInfo Category @relation(fields: [categoryId], references: [id])
  isSale       Boolean? @default(false)
  shopId       String
  shopInfo     Shop     @relation(fields: [shopId], references: [id])
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  reviews      Review[]
  coupons      Coupon[]
}

model Color {
  id        String  @id @default(uuid())
  color     String
  sizes     Size[]
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int    @default(0)
  colorId  String
  color    Color  @relation(fields: [colorId], references: [id], onDelete: Cascade)
}

model Coupon {
  id          String   @id @default(uuid())
  discount    Int
  code        String
  productId   String
  productInfo Product  @relation(fields: [productId], references: [id])
  shopId      String
  shopInfo    Shop     @relation(fields: [shopId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  ON_SHIPMENT
  SHIPPED
}

model Order {
  id             String          @id @default(uuid())
  productId      String
  productInfo    Product         @relation(fields: [productId], references: [id])
  quantity       Int
  size           String
  color          String
  total          Int             @default(0)
  userId         String
  userInfo       User            @relation(fields: [userId], references: [id])
  shopId         String
  shopInfo       Shop            @relation(fields: [shopId], references: [id])
  shippingId     String          @map("shippindId")
  shippingInfo   ShippingAddress @relation(fields: [shippingId], references: [id])
  hasReviewGiven Boolean         @default(false)
  status         OrderStatus     @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Review         Review[]
}

model Review {
  id             String          @id @default(uuid())
  image          String?         @default("")
  description    String
  rating         Int             @default(0)
  userId         String
  userInfo       User            @relation(fields: [userId], references: [id])
  orderId        String
  orderInfo      Order           @relation(fields: [orderId], references: [id])
  productId      String
  productInfo    Product         @relation(fields: [productId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  hasReply       Boolean         @default(false)
  reviewResponse ReviewResponse?

  @@unique([userId, orderId])
}

model ReviewResponse {
  id          String @id @default(uuid())
  description String
  reviewId    String @unique
  reviewInfo  Review @relation(fields: [reviewId], references: [id])
  shopId      String
  shopInfo    Shop   @relation(fields: [shopId], references: [id])
}

enum PaymentStatus {
  SUCCESS
  FAILED
}

model Payment {
  id            String        @id @default(uuid())
  amount        Int
  transactionId String        @unique
  userId        String
  userInfo      User          @relation(fields: [userId], references: [id])
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Shop          Shop?         @relation(fields: [shopId], references: [id])
  shopId        String?
}

model NewsLatter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
